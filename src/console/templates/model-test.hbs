import * from 'jest';
import * as resources from 'resources';
import { app } from '../../src/app';
import { Logger as LoggerType } from '../../src/core/Logger';
import { Types, Core, Targets } from '../../src/constants';
import { TestUtil } from './lib/TestUtil';
import { TestDataService } from '../../src/api/services/TestDataService';
import { ValidationException } from '../../src/api/exceptions/ValidationException';
import { NotFoundException } from '../../src/api/exceptions/NotFoundException';
import { {{name.capitalize}} } from '../../src/api/models/{{name.capitalize}}';
import { {{name.capitalize}}Service } from '../../src/api/services/model/{{name.capitalize}}Service';
import { {{name.capitalize}}CreateRequest } from '../../src/api/requests/model/{{name.capitalize}}CreateRequest';
import { {{name.capitalize}}UpdateRequest } from '../../src/api/requests/model/{{name.capitalize}}UpdateRequest';


describe('{{name.capitalize}}', () => {
    jasmine.DEFAULT_TIMEOUT_INTERVAL = process.env.JASMINE_TIMEOUT;

    const log: LoggerType = new LoggerType(__filename);
    const testUtil = new TestUtil();

    let testDataService: TestDataService;
    let {{name.camelCase}}Service: {{name.capitalize}}Service;
    let profileService: ProfileService;
    let marketService: MarketService;

    let {{name.camelCase}}: resources.{{name.capitalize}};

    const testData = {
        {{#each properties}}
        {{name.camelCase}}: undefined{{#unless @last}},{{/unless}} // TODO: Add test value
        {{/each}}
    } as {{name.capitalize}}CreateRequest;

    const testDataUpdated = {
        {{#each properties}}
        {{name.camelCase}}: undefined{{#unless @last}},{{/unless}} // TODO: Add test value
        {{/each}}
    } as {{name.capitalize}}UpdateRequest;

    beforeAll(async () => {
        await testUtil.bootstrapAppContainer(app);  // bootstrap the app

        testDataService = app.IoC.getNamed<TestDataService>(Types.Service, Targets.Service.TestDataService);
        {{name.camelCase}}Service = app.IoC.getNamed<{{name.capitalize}}Service>(Types.Service, Targets.Service.model.{{name.capitalize}}Service);



    });

    afterAll(async () => {
        //
    });

    test('Should create a new {{name.lowerCase}}', async () => {
        {{name.camelCase}} = await {{name.camelCase}}Service.create(testData).then(value => value.toJSON());
        const result: resources.{{name.capitalize}} = {{name.camelCase}};

        // expect(result.value).toBe(testData.value);
        {{#each properties}}
        expect(result.{{name.camelCase}}).toBe(testData.{{name.camelCase}});
        {{/each}}
    });

    test('Should list {{name.capitalize}}s with our new create one', async () => {
        const {{name.camelCase}}s: resources.{{name.capitalize}}[] = await {{name.camelCase}}Service.findAll()
            .then(value => value.toJSON());
        expect({{name.camelCase}}s.length).toBe(1);
    });

    test('Should list {{name.lowerCase}}s with our new create one', async () => {

        const {{name.camelCase}}s: resources.{{name.capitalize}}[] = await {{name.camelCase}}Service.findAll().then(value => value.toJSON());
        expect({{name.camelCase}}s.length).toBe(1);

        const result = {{name.camelCase}}s[0];
        {{#each properties}}
        expect(result.{{name.camelCase}}).toBe(testData.{{name.camelCase}});
        {{/each}}
    });

    test('Should return one {{name.lowerCase}}', async () => {
        const result: resources.{{name.capitalize}} = await {{name.camelCase}}Service.findOne({{name.camelCase}}.id).then(value => value.toJSON());
        {{#each properties}}
        expect(result.{{name.camelCase}}).toBe(testData.{{name.camelCase}});
        {{/each}}
    });

    test('Should update the {{name.lowerCase}}', async () => {
        const result: resources.{{name.capitalize}} = await {{name.camelCase}}Service.update({{name.camelCase}}.id, testDataUpdated).then(value => value.toJSON());
        {{#each properties}}
        expect(result.{{name.camelCase}}).toBe(testDataUpdated.{{name.camelCase}});
        {{/each}}
    });

    test('Should delete the {{name.capitalize}}', async () => {
        expect.assertions(1);
        await {{name.camelCase}}Service.destroy({{name.camelCase}}.id);
        await {{name.camelCase}}Service.findOne({{name.camelCase}}.id).catch(e =>
            expect(e).toEqual(new NotFoundException({{name.camelCase}}.id))
        );
    });

});
